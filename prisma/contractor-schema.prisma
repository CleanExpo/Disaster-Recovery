// NRP Contractor CRM Models
// This schema extension handles contractor onboarding, verification, and management

model Contractor {
  id                    String   @id @default(cuid())
  
  // Authentication
  username              String   @unique
  email                 String   @unique
  passwordHash          String
  passwordResetToken    String?
  passwordResetExpiry   DateTime?
  emailVerified         Boolean  @default(false)
  emailVerificationToken String?
  
  // Two-Factor Authentication
  twoFactorEnabled      Boolean  @default(false)
  twoFactorSecret       String?
  twoFactorBackupCodes  String?  // JSON array of encrypted backup codes
  
  // Contact Information
  mobileNumber          String
  mobileVerified        Boolean  @default(false)
  
  // Status
  status                String   @default("PENDING") // PENDING, UNDER_REVIEW, APPROVED, SUSPENDED, REJECTED
  onboardingStep        Int      @default(1)
  onboardingCompleted   Boolean  @default(false)
  approvedAt            DateTime?
  rejectedAt            DateTime?
  suspendedAt           DateTime?
  rejectionReason       String?
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  lastLoginAt           DateTime?
  
  // Relations
  companyProfile        ContractorCompany?
  certifications        ContractorCertification[]
  insurance             ContractorInsurance[]
  references            ContractorReference[]
  backgroundChecks      BackgroundCheck[]
  subscription          ContractorSubscription?
  documents             ContractorDocument[]
  territories           ContractorTerritory[]
  kpiMetrics            ContractorKPI[]
  notifications         ContractorNotification[]
  auditLogs             ContractorAuditLog[]
  agreements            ContractorAgreement[]
  trainings             ContractorTraining[]
  projects              ContractorProject[]
  supportTickets        ContractorSupport[]
}

model ContractorCompany {
  id                    String   @id @default(cuid())
  contractorId          String   @unique
  contractor            Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  
  // Company Details
  companyName           String
  tradingName           String?
  abn                   String   @unique
  acn                   String?
  companyStructure      String   // SOLE_TRADER, PARTNERSHIP, PTY_LTD, TRUST
  
  // Addresses
  registeredAddress     String
  registeredCity        String
  registeredState       String
  registeredPostcode    String
  
  mailingAddress        String?
  mailingCity           String?
  mailingState          String?
  mailingPostcode       String?
  
  // Contact Details
  officePhone           String?
  officeFax             String?
  website               String?
  companyEmail          String?
  
  // Directors/Owners
  directors             String   // JSON array of director objects
  
  // Branding
  companyLogo           String?  // URL to uploaded logo
  brandColors           String?  // JSON object
  
  // Verification
  abnVerified           Boolean  @default(false)
  abnVerifiedAt         DateTime?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model ContractorCertification {
  id                    String   @id @default(cuid())
  contractorId          String
  contractor            Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  
  certificationType     String   // CPP40421, IICRC_WRT, IICRC_ASD, IICRC_AMRT, etc.
  certificationName     String
  certificationNumber   String
  issuingOrganization   String
  issueDate             DateTime
  expiryDate            DateTime?
  
  // Verification
  documentUrl           String   // URL to uploaded certificate
  verified              Boolean  @default(false)
  verifiedAt            DateTime?
  verifiedBy            String?
  verificationNotes     String?
  
  // Status
  status                String   @default("PENDING") // PENDING, VERIFIED, EXPIRED, REJECTED
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model ContractorInsurance {
  id                    String   @id @default(cuid())
  contractorId          String
  contractor            Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  
  insuranceType         String   // PUBLIC_LIABILITY, PROFESSIONAL_INDEMNITY, WORKERS_COMP
  insurer               String
  policyNumber          String
  coverageAmount        Float
  excess                Float?
  
  effectiveDate         DateTime
  expiryDate            DateTime
  
  // Certificate of Currency
  certificateUrl        String   // URL to uploaded certificate
  
  // Verification
  verified              Boolean  @default(false)
  verifiedAt            DateTime?
  verifiedBy            String?
  
  // Status
  status                String   @default("PENDING") // PENDING, ACTIVE, EXPIRED, CANCELLED
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([expiryDate])
}

model ContractorReference {
  id                    String   @id @default(cuid())
  contractorId          String
  contractor            Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  
  referenceName         String
  companyName           String
  position              String
  email                 String
  phone                 String
  relationship          String   // CLIENT, SUPPLIER, PARTNER, OTHER
  projectDescription    String?
  
  // Verification
  contacted             Boolean  @default(false)
  contactedAt           DateTime?
  rating                Int?     // 1-5
  feedback              String?
  verified              Boolean  @default(false)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model BackgroundCheck {
  id                    String   @id @default(cuid())
  contractorId          String
  contractor            Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  
  checkType             String   // CRIMINAL, CREDIT, IDENTITY, QUALIFICATION
  provider              String   // Third-party provider name
  providerReference     String?
  
  // Consent
  consentGiven          Boolean
  consentDate           DateTime
  consentDocument       String?  // URL to signed consent
  
  // Results
  status                String   @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, FAILED
  result                String?  // CLEAR, FLAGGED, REQUIRES_REVIEW
  resultDetails         String?  // JSON object with detailed results
  reportUrl             String?  // URL to full report
  
  // Scoring
  riskScore             Int?     // 0-100
  riskLevel             String?  // LOW, MEDIUM, HIGH
  
  requestedAt           DateTime @default(now())
  completedAt           DateTime?
  expiresAt             DateTime?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model ContractorSubscription {
  id                    String   @id @default(cuid())
  contractorId          String   @unique
  contractor            Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  
  // Subscription Details
  tier                  String   // TIER_25KM, TIER_50KM, TIER_75KM, TIER_100KM, RURAL
  status                String   @default("PENDING") // PENDING, ACTIVE, SUSPENDED, CANCELLED
  
  // Coverage
  baseRadius            Int      // in kilometers
  additionalTerritories String?  // JSON array of additional coverage areas
  
  // Billing
  billingFrequency      String   @default("MONTHLY") // MONTHLY, QUARTERLY, ANNUAL
  amount                Float
  nextBillingDate       DateTime?
  
  // Payment Method
  paymentMethod         String?  // DIRECT_DEBIT, CREDIT_CARD
  paymentDetails        String?  // Encrypted payment details
  
  // Performance Bond
  bondAmount            Float    @default(5000)
  bondStatus            String   @default("PENDING") // PENDING, SECURED, RELEASED
  bondSecuredDate       DateTime?
  
  // Dates
  startDate             DateTime?
  endDate               DateTime?
  cancelledAt           DateTime?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  payments              ContractorPayment[]
  invoices              ContractorInvoice[]
}

model ContractorPayment {
  id                    String   @id @default(cuid())
  subscriptionId        String
  subscription          ContractorSubscription @relation(fields: [subscriptionId], references: [id])
  
  amount                Float
  type                  String   // SUBSCRIPTION, BOND, BACKGROUND_CHECK, OTHER
  status                String   @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED, REFUNDED
  
  paymentMethod         String
  transactionId         String?
  failureReason         String?
  
  dueDate               DateTime
  paidAt                DateTime?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model ContractorInvoice {
  id                    String   @id @default(cuid())
  subscriptionId        String
  subscription          ContractorSubscription @relation(fields: [subscriptionId], references: [id])
  
  invoiceNumber         String   @unique
  amount                Float
  gst                   Float
  total                 Float
  
  status                String   @default("DRAFT") // DRAFT, ISSUED, PAID, OVERDUE, CANCELLED
  
  issueDate             DateTime
  dueDate               DateTime
  paidAt                DateTime?
  
  items                 String   // JSON array of line items
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([invoiceNumber])
}

model ContractorDocument {
  id                    String   @id @default(cuid())
  contractorId          String
  contractor            Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  
  documentType          String   // CERTIFICATION, INSURANCE, ID, REFERENCE, PROJECT, OTHER
  documentName          String
  fileName              String
  fileUrl               String
  fileSize              Int
  mimeType              String
  
  // Metadata
  category              String?
  tags                  String?  // JSON array
  description           String?
  
  // Verification
  verified              Boolean  @default(false)
  verifiedAt            DateTime?
  verifiedBy            String?
  
  // Expiry
  expiryDate            DateTime?
  expiryNotificationSent Boolean @default(false)
  
  uploadedAt            DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([documentType, expiryDate])
}

model ContractorTerritory {
  id                    String   @id @default(cuid())
  contractorId          String
  contractor            Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  
  // Territory Definition
  type                  String   // RADIUS, POSTCODE, SUBURB, LGA, STATE
  name                  String
  
  // For radius-based
  centerLat             Float?
  centerLng             Float?
  radiusKm              Float?
  
  // For area-based
  postcodes             String?  // JSON array
  suburbs               String?  // JSON array
  
  // Service Preferences
  emergencyResponse     Boolean  @default(true)
  afterHours            Boolean  @default(false)
  weekendService        Boolean  @default(true)
  
  // Capacity
  maxJobsPerDay         Int      @default(5)
  currentActiveJobs     Int      @default(0)
  
  // Status
  active                Boolean  @default(true)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([type, active])
}

model ContractorKPI {
  id                    String   @id @default(cuid())
  contractorId          String
  contractor            Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  
  // Period
  periodType            String   // MONTHLY, QUARTERLY, ANNUAL
  periodStart           DateTime
  periodEnd             DateTime
  
  // Performance Metrics
  totalJobs             Int      @default(0)
  completedJobs         Int      @default(0)
  averageResponseTime   Float?   // in hours
  averageCompletionTime Float?   // in days
  
  // Quality Metrics
  customerSatisfaction  Float?   // 0-5 rating
  qualityScore          Float?   // 0-100
  complianceScore       Float?   // 0-100
  
  // Clean Claims Integration
  cleanClaimsScore      Float?   // 0-100
  carsiCompliance       Float?   // 0-100
  
  // Financial
  totalRevenue          Float?
  averageJobValue       Float?
  
  // Issues
  complaints            Int      @default(0)
  violations            Int      @default(0)
  
  calculatedAt          DateTime @default(now())
  
  @@unique([contractorId, periodType, periodStart])
  @@index([periodType, periodStart])
}

model ContractorAgreement {
  id                    String   @id @default(cuid())
  contractorId          String
  contractor            Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  
  agreementType         String   // PARTNERSHIP, CODE_OF_CONDUCT, WHS, PRIVACY, NDA
  agreementName         String
  version               String
  
  // Content
  documentUrl           String?  // URL to agreement document
  content               String?  // Agreement text
  
  // Acceptance
  accepted              Boolean  @default(false)
  acceptedAt            DateTime?
  acceptanceMethod      String?  // DIGITAL_SIGNATURE, CHECKBOX, EMAIL
  ipAddress             String?
  userAgent             String?
  
  // Digital Signature
  signatureData         String?  // Base64 encoded signature image
  signedName            String?
  signedPosition        String?
  
  // Validity
  effectiveDate         DateTime
  expiryDate            DateTime?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([agreementType, accepted])
}

model ContractorTraining {
  id                    String   @id @default(cuid())
  contractorId          String
  contractor            Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  
  trainingType          String   // CARSI, WHS, TECHNICAL, COMPLIANCE, PRODUCT
  trainingName          String
  provider              String
  
  // Progress
  status                String   @default("NOT_STARTED") // NOT_STARTED, IN_PROGRESS, COMPLETED
  progress              Int      @default(0) // 0-100
  
  // Completion
  completedAt           DateTime?
  certificateUrl        String?
  certificateNumber     String?
  
  // CEU Points
  ceuPoints             Float?
  
  // Validity
  validFrom             DateTime?
  validUntil            DateTime?
  
  // Tracking
  enrolledAt            DateTime @default(now())
  lastAccessedAt        DateTime?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([trainingType, status])
}

model ContractorProject {
  id                    String   @id @default(cuid())
  contractorId          String
  contractor            Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  
  projectName           String
  projectType           String   // WATER, FIRE, MOLD, STORM, BIOHAZARD
  clientName            String
  location              String
  
  // Timeline
  startDate             DateTime
  endDate               DateTime?
  duration              Int?     // in days
  
  // Scope
  scopeOfWork           String   // Detailed description
  areaAffected          Float?   // in square meters
  
  // Financial
  projectValue          Float?
  insuranceCompany      String?
  claimNumber           String?
  
  // Documentation
  beforePhotos          String?  // JSON array of photo URLs
  afterPhotos           String?  // JSON array of photo URLs
  reportUrl             String?
  
  // Quality
  customerRating        Float?   // 0-5
  customerFeedback      String?
  
  // Used for verification
  canContact            Boolean  @default(false)
  contactName           String?
  contactPhone          String?
  contactEmail          String?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([projectType, startDate])
}

model ContractorNotification {
  id                    String   @id @default(cuid())
  contractorId          String
  contractor            Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  
  type                  String   // SYSTEM, COMPLIANCE, EXPIRY, PAYMENT, JOB, TRAINING
  priority              String   @default("NORMAL") // LOW, NORMAL, HIGH, URGENT
  
  subject               String
  message               String
  
  // Actions
  actionRequired        Boolean  @default(false)
  actionUrl             String?
  actionDeadline        DateTime?
  
  // Status
  read                  Boolean  @default(false)
  readAt                DateTime?
  dismissed             Boolean  @default(false)
  dismissedAt           DateTime?
  
  // Delivery
  emailSent             Boolean  @default(false)
  smsSent               Boolean  @default(false)
  
  createdAt             DateTime @default(now())
  
  @@index([type, read, priority])
}

model ContractorSupport {
  id                    String   @id @default(cuid())
  contractorId          String
  contractor            Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  
  ticketNumber          String   @unique
  category              String   // TECHNICAL, BILLING, COMPLIANCE, GENERAL
  priority              String   @default("NORMAL") // LOW, NORMAL, HIGH, URGENT
  
  subject               String
  description           String
  
  status                String   @default("OPEN") // OPEN, IN_PROGRESS, WAITING, RESOLVED, CLOSED
  
  // Assignment
  assignedTo            String?
  assignedAt            DateTime?
  
  // Resolution
  resolution            String?
  resolvedAt            DateTime?
  closedAt              DateTime?
  
  // Satisfaction
  satisfactionRating    Int?     // 1-5
  satisfactionFeedback  String?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  messages              SupportMessage[]
  
  @@index([ticketNumber])
  @@index([status, priority])
}

model SupportMessage {
  id                    String   @id @default(cuid())
  supportTicketId       String
  supportTicket         ContractorSupport @relation(fields: [supportTicketId], references: [id], onDelete: Cascade)
  
  message               String
  isInternal            Boolean  @default(false)
  
  authorId              String
  authorType            String   // CONTRACTOR, ADMIN, SYSTEM
  authorName            String
  
  attachments           String?  // JSON array of attachment URLs
  
  createdAt             DateTime @default(now())
}

model ContractorAuditLog {
  id                    String   @id @default(cuid())
  contractorId          String
  contractor            Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  
  action                String   // LOGIN, LOGOUT, UPDATE_PROFILE, UPLOAD_DOCUMENT, etc.
  category              String   // AUTH, PROFILE, DOCUMENT, PAYMENT, COMPLIANCE
  
  details               String?  // JSON object with action details
  
  ipAddress             String?
  userAgent             String?
  
  performedBy           String   // User ID who performed the action
  performedByType       String   // CONTRACTOR, ADMIN, SYSTEM
  
  createdAt             DateTime @default(now())
  
  @@index([category, createdAt])
  @@index([action, createdAt])
}