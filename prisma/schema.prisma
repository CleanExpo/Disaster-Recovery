generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Agency {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  domain      String?
  logo        String?
  primaryColor String  @default("#3B82F6")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  users       User[]
  clients     Client[]
  audits      Audit[]
  proposals   Proposal[]
  invoices    Invoice[]
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  role          String    @default("CLIENT")
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  agencyId      String?
  agency        Agency?   @relation(fields: [agencyId], references: [id])
  
  clients       Client[]
  audits        Audit[]
  proposals     Proposal[]
  notifications Notification[]
}

model Client {
  id           String   @id @default(cuid())
  businessName String
  contactName  String
  email        String
  phone        String?
  website      String?
  address      String?
  city         String?
  state        String?
  zipCode      String?
  industry     String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  agencyId     String
  agency       Agency   @relation(fields: [agencyId], references: [id])
  
  userId       String?
  user         User?    @relation(fields: [userId], references: [id])
  
  audits       Audit[]
  proposals    Proposal[]
  invoices     Invoice[]
  enquiries    Enquiry[]
}

model Audit {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      String      @default("DRAFT")
  version     Int         @default(1)
  shareToken  String?     @unique
  findings    String?
  metrics     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  sharedAt    DateTime?
  
  agencyId    String
  agency      Agency      @relation(fields: [agencyId], references: [id])
  
  clientId    String
  client      Client      @relation(fields: [clientId], references: [id])
  
  createdById String
  createdBy   User        @relation(fields: [createdById], references: [id])
  
  proposals   Proposal[]
}

model Proposal {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String
  status      String   @default("DRAFT")
  shareToken  String?  @unique
  price       Float?
  validUntil  DateTime?
  acceptedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  agencyId    String
  agency      Agency   @relation(fields: [agencyId], references: [id])
  
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id])
  
  auditId     String?
  audit       Audit?   @relation(fields: [auditId], references: [id])
  
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  
  invoice     Invoice?
}

model Invoice {
  id          String        @id @default(cuid())
  invoiceNumber String      @unique
  amount      Float
  tax         Float         @default(0)
  total       Float
  status      String        @default("PENDING")
  dueDate     DateTime
  paidAt      DateTime?
  stripeInvoiceId String?   @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  agencyId    String
  agency      Agency        @relation(fields: [agencyId], references: [id])
  
  clientId    String
  client      Client        @relation(fields: [clientId], references: [id])
  
  proposalId  String?       @unique
  proposal    Proposal?     @relation(fields: [proposalId], references: [id])
}

model Enquiry {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String?
  message     String
  source      String?
  metadata    String?
  responded   Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  clientId    String?
  client      Client?  @relation(fields: [clientId], references: [id])
}

model Notification {
  id          String   @id @default(cuid())
  type        String
  title       String
  message     String
  read        Boolean  @default(false)
  metadata    String?
  createdAt   DateTime @default(now())
  
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

// Lead Management Models
model Lead {
  id                    String   @id @default(cuid())
  
  // Contact Information
  fullName              String
  phone                 String
  email                 String
  
  // Property Information
  propertyType          String
  propertyAddress       String
  suburb                String
  state                 String
  postcode              String
  
  // Damage Information
  damageType            String   // JSON array stored as string
  damageDate            DateTime
  damageDescription     String
  estimatedAreaAffected String
  
  // Insurance Information
  hasInsurance          Boolean
  insuranceCompany      String?
  claimNumber           String?
  excessAmount          String?
  
  // Value Indicators
  urgencyLevel          String
  propertyValue         String
  isBusinessProperty    Boolean
  requiresAccommodation Boolean
  
  // Lead Quality
  leadScore             Int
  leadValue             Float
  hasPhotos             Boolean
  readyToStart          String
  budget                String?
  decisionMaker         Boolean
  qualityStatus         String   // HIGH_VALUE, QUALIFIED, STANDARD
  
  // Tracking
  source                String?
  ipAddress             String?
  userAgent             String?
  status                String   @default("NEW") // NEW, ASSIGNED, ACCEPTED, REJECTED, COMPLETED
  
  // Assignment
  partnerId             String?
  partner               Partner? @relation(fields: [partnerId], references: [id])
  assignedAt            DateTime?
  acceptedAt            DateTime?
  rejectedAt            DateTime?
  completedAt           DateTime?
  
  // Metadata
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  billing               PartnerBilling[]
  tracking              LeadTracking[]
  notes                 LeadNote[]
}

model Partner {
  id                String   @id @default(cuid())
  businessName      String
  contactName       String
  email             String   @unique
  phone             String
  abn               String?
  
  // Service Information
  serviceAreas      String   // JSON array of suburbs/postcodes
  specializations   String   // JSON array of damage types
  certifications    String?  // JSON array
  insuranceApproved Boolean  @default(false)
  
  // Account Information
  leadCredits       Float    @default(0)
  accountBalance    Float    @default(0)
  creditLimit       Float    @default(5000)
  paymentTerms      Int      @default(7) // days
  
  // Settings
  autoAcceptScore   Int      @default(80)
  maxLeadsPerDay    Int      @default(10)
  receiveEmergency  Boolean  @default(true)
  receiveCommercial Boolean  @default(true)
  
  // Status
  status            String   @default("PENDING") // PENDING, ACTIVE, SUSPENDED
  verifiedAt        DateTime?
  suspendedAt       DateTime?
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  leads             Lead[]
  billing           PartnerBilling[]
  payments          PartnerPayment[]
}

model PartnerBilling {
  id          String   @id @default(cuid())
  partnerId   String
  partner     Partner  @relation(fields: [partnerId], references: [id])
  leadId      String
  lead        Lead     @relation(fields: [leadId], references: [id])
  
  amount      Float
  status      String   @default("PENDING") // PENDING, PAID, CANCELLED, REFUNDED
  dueDate     DateTime
  paidAt      DateTime?
  
  // Payment Information
  paymentMethod String?
  transactionId String?
  invoiceNumber String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PartnerPayment {
  id          String   @id @default(cuid())
  partnerId   String
  partner     Partner  @relation(fields: [partnerId], references: [id])
  
  amount      Float
  type        String   // CREDIT_PURCHASE, LEAD_PAYMENT, REFUND
  method      String   // CARD, BANK_TRANSFER, PAYPAL
  status      String   // PENDING, COMPLETED, FAILED
  
  transactionId String?
  description String?
  
  createdAt   DateTime @default(now())
}

model LeadTracking {
  id          String   @id @default(cuid())
  leadId      String
  lead        Lead     @relation(fields: [leadId], references: [id])
  
  event       String   // VIEWED, ACCEPTED, REJECTED, CONTACTED, QUOTED, WON, LOST
  metadata    String?  // JSON string with event details
  
  createdAt   DateTime @default(now())
}

model LeadNote {
  id          String   @id @default(cuid())
  leadId      String
  lead        Lead     @relation(fields: [leadId], references: [id])
  
  note        String
  type        String   // INTERNAL, PARTNER, CUSTOMER
  author      String
  
  createdAt   DateTime @default(now())
}